

The "runner" (or second pointer) technique is used in many linked list problems. The runner technique
means that you iterate through the linked list with two pointers simultaneously, with one ahead of the
other.

A number of linked list problems rely on recursion. If you're having trouble solving a linked list problem,
you should explore if a recursive approach will work.








1)
Write code to remove duplicates from an unsorted linked list.
FOLLOW UP
How would you solve this problem if a temporary buffer is not allowed?

Solution1: 
Hash table approach and iterate through list and remove element which are having duplicates. 

void deleteDups(LinkedListNode n) {
	HashSet<Integer> set = new HashSet<Integer>();
	LinkedListNode previous = null;
	while (n != null) {
		if (set.contains(n.data)) {
			previous.next = n.next;
		} else {
			set.add(n.data);
			previous = n;
		}
		n = n.next;
	}
}

O(N) time complexity. But extra space for hash table. 

Solution2: 

void deleteDups(LinkedListNode head) {
	LinkedListNode current = head;
	while (current != null) {
		/* Remove all future nodes that have the same value */
		LinkedListNode runner = current;
		while (runner.next != null) {
			if (runner.next.data == current.data) {
				runner.next = runner.next.next;
			} else {
				runner = runner.next;
			}
		}
		current = current.next;
	}
}


2) 
Return Kth to Last

3) 
Implement a function to check if a linked list is a palindrome.

4) 
Given two (singly) linked lists, determine if the two lists intersect. Return the interÂ­
secting node. Note that the intersection is defined based on reference, not value. That is, if the kth
node of the first linked list is the exact same node (by reference) as the jth node of the second
linked list, then they are intersecting.

5) 
Given a circular linked list, implement an algorithm that returns the node at the
beginning of the loop.
DEFINITION
Circular linked list: A (corrupt) linked list in which a node's next pointer points to an earlier node, so
as to make a loop in the linked list.

6) 
Delete Middle Node: Implement an algorithm to delete a node in the middle (i.e., any node but
the first and last node, not necessarily the exact middle) of a singly linked list, given only access to
that node.

7) 
Partition: Write code to partition a linked list around a value x, such that all nodes less than x come
before all nodes greater than or equal to x. If x is contained within the list, the values of x only need
to be after the elements less than x (see below). The partition element x can appear anywhere in the
"right partition"; it does not need to appear between the left and right partitions.

8) 
Intersected point: 

Detect two lists are intersected. 

One approach would be to use a hash table and just throw all the linked lists nodes into there.

1. Run through each linked list to get the lengths and the tails.
2. Compare the tails. If they are different (by reference, not by value), return immediately. There is no inter-
section.
3. Set two pointers to the start of each linked list.
4. On the longer linked list, advance its pointer by the difference in lengths.
5. Now, traverse on each linked list until the pointers are the same.

LinkedlistNode findintersection(LinkedListNode listl, LinkedListNode list2) {
	if (listl == null I I list2 == null) return null;
	/* Get tail and sizes. */
	Result resultl
	getTailAndSize(listl);
	Result result2 = getTailAndSize(list2);
	/* If different tail nodes, then there's no intersection. */
	if (resultl.tail != result2.tail) {
		return null;
		/* Set pointers to the start of each linked list. */
		LinkedlistNode shorter = resultl.size < result2.size? listl : list2;
		LinkedlistNode longer = resultl.size < result2.size ? list2 : listl;
	}

	/* Advance the pointer for the longer linked list by difference in lengths. */
	longer = getKthNode(longer, Math.abs(resultl.size - result2.size));
	/* Move both pointers until you have a collision. */
	while (shorter != longer) {
		shorter = shorter.next;
		longer = longer.next;
	}
	/* Return either one. */
	return longer;
}

class Result {
	public LinkedlistNode tail;
	public int size;
	public Result(LinkedListNode tail, int size) {
		this.tail tail;
		this.size= size;
	}
}

Result getTailAndSize(LinkedListNode list) {
	if (list == null) return null;
	int size = 1;
	LinkedlistNode current= list;
	while (current.next != null) {
		size++;
		current = current.next;
	}
	return new Result(current, size);
}

LinkedListNode getKthNode(LinkedListNode head, int k) {
	LinkedListNode current= head;
	while (k > 0 && current = null) {
		current = current.next;
		k--;
	}
	return current;
}

Time complexity O(A + B). O(1) additional space complexity. 






