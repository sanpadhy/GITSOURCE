A tree is actually a type of graph, but not all graphs are trees. Simply put, a tree is a connected graph without
cycles.

A graph is simply a collection of nodes with edges between (some of) them.
•
Graphs can be either directed (like the following graph) or undirected. While directed edges are like a

one-way street, undirected edges are like a two-way street.
•
The graph might consist of multiple isolated subgraphs. If there is a path between every pair of vertices,
it is called a "connected graph:'
The graph can also have cycles (or not). An "acyclic graph" is one without cycles.

In depth-first search (DFS), we start at the root (or another arbitrarily selected node) and explore each
branch completely before moving on to the next branch. That is, we go deep first (hence the name depth­
first search) before we go wide.
In breadth-first search (BFS), we start at the root (or another arbitrarily selected node) and explore each
neighbor before going on to any of their children. That is, we go wide (hence breadth-first search) before
we go deep.

In DFS, we visit a node a and then iterate through each of a's neighbors. When visiting a node b that is a
neighbor of a, we visit all of b's neighbors before going on to a's other neighbors. That is, a exhaustively
searches b's branch before any of its other neighbors.

1 void search(Node root) {
if (root== null) return;
2
visit(root);
3
root.visited= true;
4
for each (Node n in root.adjacent) {
5
if (n.visited == false) {
6
7
search(n);
8
9
}
10 }

In BFS, node a visits each of a's neighbors before visiting any of their neighbors. You can think of this as
searching level by level out from a.

1 void search(Node root) {
2
Queue queue = new Queue();
root.marked= true;
3
4
queue.enqueue(root); // Add to the end of queue
5
6
7
8
9
10
11
12
13
14
while (!queue.isEmpty()) {
Node r = queue.dequeue(); // Remove from the front of the queue
visit(r);
foreach (Node n in r.adjacent) {
if (n.marked == false) {
n. marked = true;
queue.enqueue(n);
15
}
16 }
}
}

Bidirectional search is used to find the shortest path between a source and destination node. It operates
by essentially running two simultaneous breadth-first searches, one from each node. When their searches
collide, we have found a path.

Additional Reading:
BlackTrees (pg 639).
Topological Sort (pg 632), Dijkstra's Algorithm (pg 633), AVL Trees (pg 637), Red­

Problems 1
Route Between Nodes: Given a directed graph, design an algorithm to find out whether there is a
route between two nodes.

Problem 2: 
Minimal Tree: Given a sorted (increasing order) array with unique integer elements, write an algo­
rithm to create a binary search tree with minimal height.

Problem 3: 
List of Depths: Given a binary tree, design an algorithm which creates a linked list of all the nodes
at each depth (e.g., if you have a tree with depth D, you'll have D linked lists).

Problem 4: 
Check Balanced: Implement a function to check if a binary tree is balanced. For the purposes of
this question, a balanced tree is defined to be a tree such that the heights of the two subtrees of any
node never differ by more than one.

Problem 5:
Validate BST: Implement a function to check if a binary tree is a binary search tree.

Problem 6: 
Successor: Write an algorithm to find the "next" node (i.e., in-order successor) of a given node in a
binary search tree. You may assume that each node has a link to its parent.

Problem 7: 
Build Order: You are given a list of projects and a list of dependencies (which is a list of pairs of
projects, where the second project is dependent on the first project). All of a project's dependencies
must be built before the project is. Find a build order that will allow the projects to be built. If there
is no valid build order, return an error.
EXAMPLE
Input:
projects: a, b, c, d, e, f
dependencies: (a, d), (f, b), (b, d), (f, a), (d, c)
Output: f, e, a, b, d, c

Problem 8: 
First Common Ancestor: Design an algorithm and write code to find the first common ancestor
of two nodes in a binary tree. Avoid storing additional nodes in a data structure. NOTE: This is not
necessarily a binary search tree.

Problem 9: 
BST Sequences: A binary search tree was created by traversing through an array from left to right
and inserting each element. Given a binary search tree with distinct elements, print all possible
arrays that could have led to this tree.

Problem 10: 
Check Subtree: Tl and T2 are two very large binary trees, with Tl much bigger than T2. Create an
algorithm to determine if T2 is a subtree of Tl.
A tree T2 is a subtree of Tl if there exists a node n in Tl such that the subtree of n is identical to T2.
That is, if you cut off the tree at node n, the two trees would be identical.

Problem 11: 
Random Node: You are implementing a binary tree class from scratch which, in addition to
insert, find, and delete, has a method getRandomNode() which returns a random node
from the tree. All nodes should be equally likely to be chosen. Design and implement an algorithm
for getRandomNode, and explain how you would implement the rest of the methods.

Problem 12: 
Paths with Sum: You are given a binary tree in which each node contains an integer value (which
might be positive or negative). Design an algorithm to count the number of paths that sum to a
given value. The path does not need to start or end at the root or a leaf, but it must go downwards
(traveling only from parent nodes to child nodes).




